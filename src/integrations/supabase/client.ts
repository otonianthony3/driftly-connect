
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://iifhuvgifbtpahwzueml.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlpZmh1dmdpZmJ0cGFod3p1ZW1sIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU3NTc3MTEsImV4cCI6MjA1MTMzMzcxMX0.0Aj9qmbX5xivgnLeHZYY1AY0SQ8Gm5giIMd5CzRlYnM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Execute the following SQL in the Supabase SQL Editor:
/*
-- Create notification templates
CREATE TABLE IF NOT EXISTS notification_templates (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL UNIQUE,
  type TEXT NOT NULL,
  body TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert default templates if they don't exist
INSERT INTO notification_templates (name, type, body) 
VALUES 
  ('membership_approved', 'membership', 'Your membership request has been approved! Please add your bank account details for disbursement.'),
  ('membership_rejected', 'membership', 'Your membership request has been rejected.')
ON CONFLICT (name) DO NOTHING;

-- Create function to simplify notification creation
CREATE OR REPLACE FUNCTION public.create_notification(
  p_user_id UUID,
  p_template_name TEXT,
  p_data JSONB DEFAULT '{}'::JSONB
) RETURNS notifications AS $$
DECLARE
  v_template notification_templates;
  v_notification notifications;
BEGIN
  -- Get template
  SELECT * INTO v_template FROM notification_templates WHERE name = p_template_name;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Notification template % not found', p_template_name;
  END IF;

  -- Create notification
  INSERT INTO notifications (
    user_id,
    message,
    type,
    data
  ) VALUES (
    p_user_id,
    v_template.body,
    v_template.type,
    p_data
  )
  RETURNING * INTO v_notification;

  RETURN v_notification;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant RLS permissions
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can see their own notifications" 
ON notifications FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Allow users to insert their own notifications" 
ON notifications FOR INSERT 
WITH CHECK (auth.uid() = user_id);

-- Allow users with service_role to insert notifications for any user
CREATE POLICY "Service roles can insert notifications for any user" 
ON notifications FOR INSERT 
USING (auth.jwt() ->> 'role' = 'service_role');
*/
